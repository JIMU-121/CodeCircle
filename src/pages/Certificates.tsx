import React, { useState, useEffect } from "react";
import { supabase } from "../lib/supabase";
import { useParams } from "react-router-dom";

const Certificate: React.FC = () => {
  const [participantName, setParticipantName] = useState("");
  const [eventName, setEventName] = useState("");
  const [eventDate, setEventDate] = useState("");
  const [coordinator, setCoordinator] = useState("");
  const [organizer, setOrganizer] = useState("");
  const [loading, setLoading] = useState(true);
  const { eventId } = useParams(); // Get eventId from URL params

  useEffect(() => {
    const fetchCertificateData = async () => {
      setLoading(true);

      // Fetch authenticated user
      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();

      if (authError || !user) {
        alert("User not found. Please login again.");
        setLoading(false);
        return;
      }

      // Check if user attended the event
      const { data: attendanceData, error: attendanceError } = await supabase
        .from("event_participants")
        .select("attendance_status")
        .eq("user_id", user.id)
        .eq("event_id", eventId)
        .single();

      if (attendanceError || !attendanceData || !attendanceData.attendance_status) {
        alert("You did not attend this event or no record found.");
        setLoading(false);
        return;
      }

      // Fetch event details
      const { data: eventData, error: eventError } = await supabase
        .from("events")
        .select("title, date, coordinator, organizer")
        .eq("id", eventId)
        .single();

      if (eventError || !eventData) {
        console.error("Error fetching event details:", eventError?.message);
        setLoading(false);
        return;
      }

      // Set state with fetched data
      setParticipantName(user.user_metadata.full_name || user.email);
      setEventName(eventData.title);
      setEventDate(eventData.date);
      setCoordinator(eventData.coordinator || "Event Coordinator");
      setOrganizer(eventData.organizer || "Organizer");
      setLoading(false);
    };

    fetchCertificateData();
  }, [eventId]);

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100 p-4">
      {loading ? (
        <p className="text-center text-lg">Generating certificate...</p>
      ) : (
        <div className="bg-white border-4 border-dashed border-indigo-600 rounded-xl shadow-lg max-w-3xl w-full p-10 relative">
          {/* Ribbon */}
          <div className="absolute -top-10 left-1/2 transform -translate-x-1/2">
            <div className="bg-indigo-600 text-white px-6 py-2 rounded-full font-bold text-sm uppercase shadow-md">
              Certificate of Achievement
            </div>
          </div>

          {/* Header */}
          <div className="text-center mt-10">
            <h1 className="text-3xl font-bold text-gray-800">CodeCircle</h1>
            <p className="text-gray-500 text-sm italic mt-1">Empowering Coders Everywhere</p>
          </div>

          {/* Certificate Body */}
          <div className="mt-8 text-center">
            <p className="text-gray-600 text-lg">This is to certify that</p>
            <h2 className="text-2xl font-bold text-gray-800 mt-4">{participantName}</h2>
            <p className="text-gray-600 mt-4">
              has successfully participated in the <span className="font-semibold">{eventName}</span> organized by{" "}
              <span className="font-semibold">CodeCircle</span> on <span className="font-semibold">{eventDate}</span>.
            </p>
          </div>

          {/* Signature Section */}
          <div className="flex justify-between items-center mt-12">
            <div className="text-center">
              <div className="h-12 border-b-2 border-gray-400 w-32 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">{coordinator}</p>
            </div>
            <div className="text-center">
              <div className="h-12 border-b-2 border-gray-400 w-32 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">{organizer}</p>
            </div>
          </div>

          {/* Footer */}
          <div className="text-center mt-12">
            <p className="text-xs text-gray-400">This certificate is digitally generated by CodeCircle Event Management System.</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default Certificate;
